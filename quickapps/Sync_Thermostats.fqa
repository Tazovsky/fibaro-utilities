{
  "name": "Sync Thermostats",
  "type": "com.fibaro.binarySwitch",
  "apiVersion": "1.2",
  "initialProperties": {
    "viewLayout": {
      "$jason": {
        "body": {
          "header": {
            "style": {
              "height": "0"
            },
            "title": "quickApp_device_1243"
          },
          "sections": {
            "items": []
          }
        },
        "head": {
          "title": "quickApp_device_1243"
        }
      }
    },
    "uiCallbacks": [],
    "quickAppVariables": [
      {
        "name": "INTERVAL",
        "type": "string",
        "value": "600"
      }
    ],
    "typeTemplateInitialized": true
  },
  "initialInterfaces": [],
  "files": [
    {
      "name": "main",
      "isMain": true,
      "isOpen": true,
      "content": "-- Binary switch type should handle actions turnOn, turnOff\n-- To update binary switch state, update property \"value\" with boolean\n\nlocal sf = string.format\n\nfunction QuickApp:turnOn()\n    self:debug(\"binary switch turned on\")\n    self:updateProperty(\"value\", true)\nend\n\nfunction QuickApp:turnOff()\n    self:debug(\"binary switch turned off\")\n    self:updateProperty(\"value\", false)    \nend\n\nfunction getClimateZoneByID(id, climate_zones)\n    if not id then\n        error(\"id argument is missing.\")\n    end\n    if not climate_zones then\n        error(\"climate_zones argument is missing.\")\n    end\n\n    for i=1,#climate_zones do\n        local zone = climate_zones[i]\n        if tostring(zone.id) == tostring(id) then\n            return zone\n        end\n    end\nend\n\nfunction syncDeviceSetpointWithClimateZoneTemp(id, zone)\n    if not id then\n        error(\"id argument is missing.\")\n    end\n    if not zone then\n        error(\"zone argument is missing.\")\n    end\n    local target_temp = tostring(zone.properties.currentTemperatureHeating)\n    print(string.format(\"ID %s: setHeatingThermostatSetpoint -> %s\", id, target_temp))\n    fibaro.call(tonumber(id), \"setHeatingThermostatSetpoint\", target_temp)\n    --fibaro.setTimeout(1500, function() fibaro.call(tonumber(id), \"removeClimatePanelOverrideSchedule\") end)\n\n    \n\nend\n\nfunction QuickApp:runConfig(param)\n    self.interval = tonumber(self:getVariable(\"INTERVAL\")) -- in seconds\nend\n\nfunction QuickApp:main(param)\n    self:debug(\"main\")\n    local curr_ts = tonumber(api.get(\"/settings/info\").timestamp)\n    local climate_zones = api.get(\"/panels/climate\")\n    local devices = getFilteredDevices()\n    local notification_msg = \"\"\n    for i=1,#devices do\n        local dev = devices[i]\n        local zone = getClimateZoneByID(dev.properties.climateZoneId, climate_zones)        \n        \n        -- sometime thermostats get stuck with past timestamp\n        if dev.properties.thermostatMode == \"Heat\" and \n            tonumber(dev.properties.setpointExpiryDate) < curr_ts and\n            zone.mode == \"Schedule\" and\n            tonumber(dev.properties.heatingThermostatSetpoint) ~= tonumber(zone.properties.currentTemperatureHeating)\n        then\n            local msg = sf(\"Resetting thermostat '%s' (ID %s): zone.properties.currentTemperatureHeating %s, dev.properties.heatingThermostatSetpoint %s\", \n                          dev.name, dev.id, zone.properties.currentTemperatureHeating, dev.properties.heatingThermostatSetpoint)\n            self:debug(msg)\n            notification_msg = notification_msg .. msg .. \"\\n\"\n\n            fibaro.setTimeout(1000, function()\n                -- sync thermostat setpoint with zone.setpoint\n                fibaro.call(dev.id, \"setHeatingThermostatSetpoint\", zone.properties.currentTemperatureHeating)\n                -- reset climate ovverride\n                fibaro.setTimeout(30 * 1000, function() fibaro.call(dev.id, \"removeClimatePanelOverrideSchedule\") end)\n            end)\n\n            --[[\n            self:debug(\">>> dev.name: \", dev.name)\n            self:debug(\"dev.properties.setpointExpiryDate: \", dev.properties.setpointExpiryDate)\n            print(\"dev.properties.heatingThermostatSetpoint: \", dev.properties.heatingThermostatSetpoint)\n            print(\"zone.properties.currentTemperatureHeating: \", zone.properties.currentTemperatureHeating)\n            fibaro.call(dev.id, \"removeClimatePanelOverrideSchedule\")\n            ]]--\n\n\n        end\n    end\n\n    ------------------------ notifications ------------------------\n    if notification_msg ~= \"\" then\n        fibaro.alert('email', {[1] = 2, }, notification_msg, false)\n    else\n        self:debug(\"No thermostats to reset.\")\n    end\nend\n\nfunction QuickApp:onInit(param)\n    self:debug(\"onInit\")\n    self:runConfig()\n    if self.properties.value == true then\n            self:main(param)\n    end\n     ------------------------ loop starts here ------------------------\n    fibaro.setTimeout(self.interval * 1000, function()\n        if self.properties.value == true then\n            self:main(param)\n        end\n    end)\nend\n"
    },
    {
      "name": "getFilteredDevices",
      "isMain": false,
      "isOpen": false,
      "content": "function deepcopy(orig)\n    local orig_type = type(orig)\n    local copy\n    if orig_type == 'table' then\n        copy = {}\n        for orig_key, orig_value in next, orig, nil do\n            copy[deepcopy(orig_key)] = deepcopy(orig_value)\n        end\n        --setmetatable(copy, deepcopy(getmetatable(orig)))\n    else -- number, string, boolean, etc\n        copy = orig\n    end\n    return copy\nend\n\nlocal deviceFilter = \n    {\n        filters = {\n            {\n                filter = \"enabled\",\n                value = { true }\n            },\n            --[[\n            {\n                filter = \"visible\",\n                value = { true }\n            },\n            ]]--\n            {\n                filter = \"hasProperty\",\n                value = { \"climateZoneId\"}\n            }\n        }, \n        attributes = {\n            -- define the list of Fibaro device attributes we are interested in\n            main = {\n                \"id\", \"type\", \"baseType\", \"name\", \"properties\", \"parentId\"\n            }\n        }\n    }\n\nfunction getFilteredDevices()\n\n    filters1 = deepcopy(deviceFilter)\n    table.insert(filters1.filters, { filter = \"type\", value = {\"com.fibaro.hvacSystem\"} })\n\n    filters2 = deepcopy(deviceFilter)\n    table.insert(filters2.filters, { filter = \"type\", value = {\"com.fibaro.FGT001\"} })\n        \n    filteredDevices = api.post(\"/devices/filter\", filters1)\n    filteredDevices2 = api.post(\"/devices/filter\", filters2)\n\n    for _, v in pairs(filteredDevices2) do table.insert(filteredDevices, v) end -- merge tables\n\n    return filteredDevices\nend\n"
    }
  ]
}
