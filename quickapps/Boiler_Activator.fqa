{
  "name": "Boiler Activator",
  "type": "com.fibaro.genericDevice",
  "apiVersion": "1.2",
  "initialProperties": {
    "viewLayout": {
      "$jason": {
        "body": {
          "header": {
            "style": {
              "height": "0"
            },
            "title": "quickApp_device_1082"
          },
          "sections": {
            "items": [
              {
                "components": [
                  {
                    "name": "lblActivator",
                    "style": {
                      "weight": "1.2"
                    },
                    "text": "Heat Activator",
                    "type": "label",
                    "visible": true
                  },
                  {
                    "style": {
                      "weight": "0.5"
                    },
                    "type": "space"
                  }
                ],
                "style": {
                  "weight": "1.2"
                },
                "type": "vertical"
              },
              {
                "components": [
                  {
                    "name": "status",
                    "style": {
                      "weight": "1.2"
                    },
                    "text": "Status",
                    "type": "label",
                    "visible": true
                  },
                  {
                    "style": {
                      "weight": "0.5"
                    },
                    "type": "space"
                  }
                ],
                "style": {
                  "weight": "1.2"
                },
                "type": "vertical"
              },
              {
                "components": [
                  {
                    "name": "lblWindow",
                    "style": {
                      "weight": "1.2"
                    },
                    "text": "Window",
                    "type": "label",
                    "visible": true
                  },
                  {
                    "style": {
                      "weight": "0.5"
                    },
                    "type": "space"
                  }
                ],
                "style": {
                  "weight": "1.2"
                },
                "type": "vertical"
              },
              {
                "components": [
                  {
                    "name": "lblHysteresis",
                    "style": {
                      "weight": "1.2"
                    },
                    "text": "Hysteresis",
                    "type": "label",
                    "visible": true
                  },
                  {
                    "style": {
                      "weight": "0.5"
                    },
                    "type": "space"
                  }
                ],
                "style": {
                  "weight": "1.2"
                },
                "type": "vertical"
              },
              {
                "components": [
                  {
                    "name": "btnEnable",
                    "style": {
                      "weight": "1.2"
                    },
                    "text": "Enabled",
                    "type": "button",
                    "visible": true
                  },
                  {
                    "style": {
                      "weight": "0.5"
                    },
                    "type": "space"
                  }
                ],
                "style": {
                  "weight": "1.2"
                },
                "type": "vertical"
              }
            ]
          }
        },
        "head": {
          "title": "quickApp_device_1082"
        }
      }
    },
    "uiCallbacks": [
      {
        "callback": "onEnable",
        "eventType": "onReleased",
        "name": "btnEnable"
      }
    ],
    "quickAppVariables": [
      {
        "name": "FreezeProtect",
        "type": "string",
        "value": "10"
      },
      {
        "name": "BoilerSwitchID",
        "type": "string",
        "value": "284"
      },
      {
        "name": "MaxTemperature",
        "type": "string",
        "value": "30"
      },
      {
        "name": "UpdateInterval",
        "type": "string",
        "value": "300"
      },
      {
        "name": "Hysteresis",
        "type": "string",
        "value": "0.3"
      }
    ],
    "typeTemplateInitialized": true
  },
  "files": [
    {
      "name": "main",
      "isMain": true,
      "isOpen": true,
      "content": "---------------------------------\n---------- Version 1.4.1 --------\n---------------------------------\n\nfunction intToBool(num)\n    if type(num) ~= \"number\" then\n        error(\"Variable is not number, but \" .. type(num))\n    end\n    if num == 1 then\n        return true\n    elseif num == 0 then\n        return false\n    else\n         error(\"Allowed values are [0, 1], but is \" .. tostring(num))\n    end\nend\n\nfunction getHeatingVar()\n    value = hub.getGlobalVariable(\"HEATING_ENABLED\")\n    return intToBool(tonumber(value))\nend\n\nfunction setHeatingVar(boolValue)\n\n    if type(boolValue) ~= \"boolean\" then\n        error(\"Variable is not boolean, but \" .. type(boolValue))\n    end\n    value = boolValue and \"1\" or \"0\"\n    print(\"Setting global variable HEATING_ENABLED to \" .. value)\n    hub.setGlobalVariable(\"HEATING_ENABLED\", value)\n    return boolValue\nend\n\n-- Main initialization\nfunction QuickApp:onInit()\n    self:debug(\"onInit\")\n    self.enabled = getHeatingVar()\n    self:runCheck(\"init\")\nend\n\n-- even handler for PAUSE button\nfunction QuickApp:onEnable()\n\n    if self.enabled == true then\n        self.enabled = setHeatingVar(false)\n     else\n        self.enabled = setHeatingVar(true)\n        --self:updateProperty(\"deviceIcon\", 1012)\n    end\n    self:updateButton()\nend\n\n-- Update button label based on state\nfunction QuickApp:updateButton()\n    if self.enabled == true then\n        self:updateView(\"btnEnable\", \"text\", \"RUNNING\")\n     else\n        self:updateView(\"btnEnable\", \"text\", \"PAUSED\")\n        self:updateView(\"status\", \"text\", \"-\")\n    end\nend\n\n\n-- Reading variables from Variables TAB\nfunction QuickApp:readConfiguration()\n\n    -- Boiler ID\n    local boilerSwitchDeviceID = self:getVariable(\"BoilerSwitchID\")\n    self.boilerSwitchDeviceID = tonumber(boilerSwitchDeviceID)\n    if type(self.boilerSwitchDeviceID) ~= \"number\" then\n        self:updateView(\"lblWindow\", \"text\", \"No boiler device specified in device variables tab.\" )\n        return false\n    end\n    -- FreezeProtect\n    local FreezeProtect = self:getVariable(\"FreezeProtect\")\n    self.FreezeProtect = tonumber(FreezeProtect)\n    if type(self.FreezeProtect) ~= \"number\" then\n        self:updateView(\"lblWindow\", \"text\", \"No freeze protect temperature specified in device variables tab.\" )\n        return false\n    end\n    -- MaxTemperature\n    local MaxTemperature = self:getVariable(\"MaxTemperature\")\n    self.MaxTemperature = tonumber(MaxTemperature)\n    if type(self.MaxTemperature) ~= \"number\" then\n        self:updateView(\"lblWindow\", \"text\", \"No max temperature specified in device variables tab.\" )\n        return false\n    end\n    -- Hysteresis\n    local Hysteresis = self:getVariable(\"Hysteresis\")\n    self:updateView(\"lblHysteresis\", \"text\", \"Hysteresis: \" .. tostring(Hysteresis))\n    self.Hysteresis = tonumber(Hysteresis)\n    if type(self.Hysteresis) ~= \"number\" then\n        self:updateView(\"lblWindow\", \"text\", \"No hysteresis specified in device variables tab.\" )\n        return false\n    end\n    -- Interval\n    local UpdateInterval = self:getVariable(\"UpdateInterval\")\n    self.UpdateInterval = tonumber(UpdateInterval)\n    if type(self.UpdateInterval) ~= \"number\" then\n        self:updateView(\"lblWindow\", \"text\", \"No update interval specified in device variables tab.\" )\n        return false\n    end\n    -- all OK returning TRUE\n    self:updateButton()\n    self:updateView(\"lblWindow\", \"text\", \" \" )\n    return true\nend\n\n-- main function\nfunction QuickApp:runCheck(param)\n    -- read configuration\n    if self:readConfiguration() == true then\n        -- do nothing if not enabled\n\n        if self.enabled == true then\n            print(\"---\")\n\n            local devs = mergeTables(\n                fibaro.getDevicesID({type = \"com.fibaro.FGT001\", enabled = true}),\n                fibaro.getDevicesID({type = \"com.fibaro.hvacSystem\", enabled = true})\n            )\n            local eurotronicProductInfo = \"1,72,0,3,0,1,0,16\"\n            local heatitZtempProductInfo = \"1,155,0,4,2,4,1,1\"\n            \n            local heatingNeededFor = \"\"\n            local heatingNeededForTable = {}\n            local heatingNeeded = false\n\n            local oopenWindowDetectedBy = \"\"\n            local openWindowDetected = false\n\n            -- cycle through all radiator heads\n            for i=1,#devs do\n                local setpoint = fibaro.getValue(devs[i], \"heatingThermostatSetpoint\")\n                local setpointText = setpoint\n                local devName = fibaro.getName(devs[i])\n                \n                local data, status = api.get(\"/devices/\" .. devs[i])\n\n                --- helper variables for logging\n                local climateZoneID = tostring(data.properties.climateZoneId)\n                local zoneIDprefix = string.format(\"[Zone %s] \", climateZoneID)\n                local devIDprefix = string.format(\"[ID %s] \", devs[i])\n                \n                \n                if data.properties.thermostatMode == \"Heat\" then\n\n                    local window = fibaro.getValue(devs[i], \"windowOpened\")\n                    -- check all door sensors in device's room\n                    local doorSensors = getDoorSensorsInDeviceRoom(devs[i])\n                    for i=1,#doorSensors do\n                        if fibaro.getValue(doorSensors[i], \"value\") then\n                            window = true\n                            break -- if at least one window/door opened then stop iteration\n                        end\n                    end\n                    \n                    local mode = fibaro.getValue(devs[i], \"thermostatMode\")\n                    \n                    -- Special cases\n                    if mode == \"Off\" then\n                        setpoint = self.FreezeProtect\n                        setpointText = \"OFF\"\n                    end\n                    if mode == \"ManufacturerSpecific\" then\n                        setpoint = self.MaxTemperature\n                        setpointText = \"MAX\"\n                    end\n\n                    -- open window handling\n                    if window == true then\n                        openWindowDetected = true\n                        oopenWindowDetectedBy = oopenWindowDetectedBy .. devName .. \", \"\n                        print(\"window: \" .. oopenWindowDetectedBy)\n                    else\n                        --[[\n                        if data.properties.heatRequired then\n                            heatingNeededFor = heatingNeededFor .. zoneIDprefix .. devName .. \", \"\n                            heatingNeeded = true\n                        end\n                        ]]--\n\n                        if data.type == \"com.fibaro.FGT001\" and data.properties.heatRequired == true then\n                            heatingNeeded = true\n                            \n                            local heatingDevinfo = zoneIDprefix .. devIDprefix ..  devName .. \" --- heatRequired: true\" .. \",\"\n                            table.insert(heatingNeededForTable, heatingDevinfo)\n                            print(heatingDevinfo)\n                            heatingNeededFor = heatingNeededFor ..  heatingDevinfo\n                        --elseif data.properties.productInfo == eurotronicProductInfo then\n                        elseif data.properties.productInfo ~= nil and data.properties.productInfo == heatitZtempProductInfo and data.properties.thermostatOperatingState == \"Heating\" then\n                            heatingNeeded = true\n                            local thermochildren=fibaro.getDevicesID({type = \"com.fibaro.temperatureSensor\", enabled = true, parentId=data.parentId})\n                            for j=1,#thermochildren do\n                                    local currentTemp = fibaro.getValue(thermochildren[j], \"value\")\n                                    local heatingDevinfo = zoneIDprefix .. devIDprefix .. devName .. \" --- \" .. \"Setpoint: \" .. setpointText .. \" - actual: \" .. currentTemp .. \", \"\n                                    table.insert(heatingNeededForTable, heatingDevinfo)\n                                    heatingNeededFor = heatingNeededFor .. heatingDevinfo\n                                    print(heatingDevinfo)\n                            end\n                            \n                        else\n                            -- how to get temp sensor - it depends whether is it virtual thermostat or real one\n                            if data.properties.linkedDeviceType == \"Thermostat\" and data.properties.thermostatMode == \"Heat\" then\n                                local linked_devs = data.properties.devices\n                                thermochildren = {}\n                                \n                                for i=1,#linked_devs do\n                                    local dev, status = api.get(string.format(\"/devices/%s\", linked_devs[i]))\n                                    if dev.type == \"com.fibaro.temperatureSensor\" then\n                                        table.insert(thermochildren, linked_devs[i])\n                                    end\n                                end\n                            else\n                                thermochildren=fibaro.getDevicesID({type = \"com.fibaro.temperatureSensor\", enabled = true, parentId=data.parentId}) \n                            end\n\n                            if thermochildren then\n                                for j=1,#thermochildren do\n                                    \n                                    local currentTemp = fibaro.getValue(thermochildren[j], \"value\")\n                                    --print(devIDprefix .. devName .. \" --- \" .. \"Setpoint: \" .. setpointText .. \" - actual: \" .. currentTemp) \n                                    if setpoint - self.Hysteresis > currentTemp then\n                                            local heatingDevinfo = zoneIDprefix .. devIDprefix .. devName .. \" --- set: \" .. setpointText .. \" - current: \" .. currentTemp .. \", \"\n                                            table.insert(heatingNeededForTable, heatingDevinfo)\n                                            print(heatingDevinfo)\n\n                                            heatingNeededFor = heatingNeededFor .. heatingDevinfo\n                                            heatingNeeded = true\n                                    end\n                                end\n                            end\n                        end\n                    end\n                end\n            end\n            -- end of detection cycle through radiator heads, process action\n            local actualBoilerState = fibaro.getValue(self.boilerSwitchDeviceID, \"value\")\n\n            if heatingNeeded == true then\n                updateDashboardMsg = \"Heating is needed for: \\n\"\n                for i=1,#heatingNeededForTable do\n                    updateDashboardMsg = updateDashboardMsg .. heatingNeededForTable[i] .. \"\\n\"\n                end\n\n                print(updateDashboardMsg)\n\n                if (actualBoilerState == false) then\n                    fibaro.call(self.boilerSwitchDeviceID, \"turnOn\")\n                    print(\"Boiler turned On\")\n                    fibaro.alert('email', {[1] = 2, }, updateDashboardMsg, false) \n                end\n                self:updateProperty(\"deviceIcon\", 1010)\n\n                self:updateView(\"status\", \"text\", updateDashboardMsg) \n            else\n                print(\"Heating is not needed.\")\n                if (actualBoilerState == true) then\n                    fibaro.call(self.boilerSwitchDeviceID, \"turnOff\")\n                    print(\"Boiler turned Off\")\n                    fibaro.alert('email', {[1] = 2, }, \"Boiler turned Off\", false) \n                end\n                self:updateProperty(\"deviceIcon\", 1009)\n                self:updateView(\"status\", \"text\", \"Heating is not needed.\")  \n            end \n            -- open wiondow visual \n            if openWindowDetected == true then\n                self:updateView(\"lblWindow\", \"text\", \"Open window detected at: \" .. oopenWindowDetectedBy)\n            else\n                self:updateView(\"lblWindow\", \"text\", \" \" )\n            end\n            print(\"---\")\n        end\n    end\n    fibaro.setTimeout(self.UpdateInterval * 1000, function() \n        self:runCheck(param)\n    end)\n    self:updateButton()\nend"
    },
    {
      "name": "helpers",
      "isMain": false,
      "isOpen": false,
      "content": "function getVirtThermostatLinkedDevices(ID) \n    local data, status = api.get(\"/devices/\" .. ID)\n\n    if data.properties.linkedDeviceType ~= \"Thermostat\" then\n        return nil\n    end\n\n    linkedDevs = data.properties.devices\n    tempID = nil\n    valveID = nil\n\n    for i=1,#linkedDevs do\n        local id = linkedDevs[i]\n        local data, status = api.get(\"/devices/\" .. linkedDevs[i])\n\n        if data.type == \"com.fibaro.temperatureSensor\" then\n            tempID = id\n        end\n\n        if data.properties.deviceRole == \"Valve\" then\n            valveID = id\n        end\n    end\n\n    return {tempID=tempID, valveID=valveID}\nend\n\n\n---------- filter devices by productInfo property\nfunction getDevicesByProductInfo(productInfo) \n    local devs=fibaro.getDevicesID({type = \"com.fibaro.hvacSystem\", enabled = true})\n    local filtered_devs = {}\n\n    for i=1,#devs do\n        local data, status = api.get(string.format(\"/devices/%s\", devs[i]))\n        if data.properties.productInfo == productInfo then\n            table.insert(filtered_devs, data)\n        end\n    end\n\n    return filtered_devs\nend\n\nfunction getEurotronicThermostats()\n    eurotronicProductInfo = \"1,72,0,3,0,1,0,16\"\n    return getDevicesByProductInfo(eurotronicProductInfo)\nend\n\nfunction getHeatitThermostats()\n    heatitZtempProductInfo = \"1,155,0,4,2,4,1,1\"\n    return getDevicesByProductInfo(heatitZtempProductInfo)    \nend\n\n\n---------- get Euurotronic Spirit thermostats\n\nfunction getEurotronicThermostats()\n    eurotronicProductInfo = \"1,72,0,3,0,1,0,16\"\n    return getDevicesByProductInfo(eurotronicProductInfo)\nend\n\n\n---------- get Heatit Z Temp2 themostats\nfunction getHeatitThermostats()\n    heatitZtempProductInfo = \"1,155,0,4,2,4,1,1\"\n    return getDevicesByProductInfo(heatitZtempProductInfo)    \nend\n\n\n---------- get virtual themostats (connected with floor radiators)\nfunction getVirtualThermostats() \n    local devs=fibaro.getDevicesID({type = \"com.fibaro.hvacSystem\", enabled = true})\n    local filtered_devs = {}\n    for i=1,#devs do\n        local data, status = api.get(string.format(\"/devices/%s\", devs[i]))\n\n        if data.properties.linkedDeviceType == \"Thermostat\" and \n            data.properties.thermostatMode == \"Heat\" then\n            local linked_devs = data.properties.devices\n            local devices_deatils = {}\n            for i=1,#linked_devs do\n                local dev, status = api.get(string.format(\"/devices/%s\", linked_devs[i]))\n\n                if dev.type == \"com.fibaro.temperatureSensor\" then\n                    devices_deatils[\"tempSensor\"] = linked_devs[i]\n                elseif dev.type == \"com.fibaro.binarySwitch\" and \n                        dev.properties.deviceRole == \"Valve\" then\n                        devices_deatils[\"valve\"] = linked_devs[i]\n                end\n            end\n            -- add linked devs details\n            data.devices_deatils = devices_deatils\n\n            table.insert(filtered_devs, data)\n        end\n    end\n\n    return filtered_devs\nend\n\n\nfunction getDoorSensorsInDeviceRoom(ID)\n    local roomID = fibaro.getRoomID(ID)\n    doorSensors = fibaro.getDevicesID({roomID = roomID, enabled = true, type = \"com.fibaro.FGDW002\"})\n    -- filter by category: climate\n    local filtered_sensors = {}\n    for i=1,#doorSensors do\n        local data, status = api.get(\"/devices/\" .. doorSensors[i])\n        local categories = data.properties.categories\n        for j=1,#categories do\n            -- if door sensor is in cilmate category, then it affects heating\n            if categories[j] == \"climate\" then\n                table.insert(filtered_sensors, doorSensors[i])\n                break\n            end\n        end\n    end\n\n    return filtered_sensors\nend\n"
    },
    {
      "name": "runEurotronicCheck",
      "isMain": false,
      "isOpen": false,
      "content": "function QuickApp:runEurotronicCheck(param)\n    -- read configuration\n    if self:readConfiguration() == true then\n        -- do nothing if not enabled\n        if self.enabled == true then\n            print(\"---\")\n\n            local devs=getEurotronicThermostats\n            local heatingNeededFor = \"[Eurotronic] \"\n            local heatingNeeded = false\n\n            local oopenWindowDetectedBy = \"\"\n            local openWindowDetected = false\n\n            -- cycle through all radiator heads\n            for i=1,#devs do\n                local setpoint = fibaro.getValue(devs[i], \"heatingThermostatSetpoint\")\n                local setpointText = setpoint\n                local devName = fibaro.getName(devs[i])\n                \n                local data, status = api.get(\"/devices/\" .. devs[i])\n                local window = fibaro.getValue(devs[i], \"windowOpened\")\n                local mode = fibaro.getValue(devs[i], \"thermostatMode\")\n                \n                -- Special cases\n                if mode == \"Off\" then\n                    setpoint = self.FreezeProtect\n                    setpointText = \"OFF\"\n                end\n                if mode == \"ManufacturerSpecific\" then\n                    setpoint = self.MaxTemperature\n                    setpointText = \"MAX\"\n                end\n\n                -- open window handling\n                if window == true then\n                    openWindowDetected = true\n                    oopenWindowDetectedBy = oopenWindowDetectedBy .. devName .. \", \"\n                    print(\"window: \" .. oopenWindowDetectedBy)\n                else\n                    local thermochildren=fibaro.getDevicesID({type = \"com.fibaro.temperatureSensor\", enabled = true, parentId=data.parentId}) \n                    for j=1,#thermochildren do\n                        local currentTemp = fibaro.getValue(thermochildren[j], \"value\")\n                        print(devName .. \" --- \" .. \"Setpoint: \" .. setpointText .. \" - actual: \" .. currentTemp) \n                        if setpoint - self.Hysteresis > currentTemp then\n                                heatingNeededFor = heatingNeededFor .. devName .. \" set: \" .. setpointText .. \" - current: \" .. currentTemp .. \", \"\n                                heatingNeeded = true\n                        end\n                    end\n                    \n                end\n            end\n            \n            if heatingNeeded == true then\n                print(\"Heating is needed for: \" .. heatingNeededFor)\n            end\n            --[[\n            -- end of detection cycle through radiator heads, process action\n            local actualBoilerState = fibaro.getValue(self.boilerSwitchDeviceID, \"value\")\n            if heatingNeeded == true then\n                print(\"Heating is needed for: \" .. heatingNeededFor)\n                if( actualBoilerState == false) then\n                    fibaro.call(self.boilerSwitchDeviceID, \"turnOn\")\n                    print(\"Boiler turned On\")\n                end\n                self:updateView(\"status\", \"text\", \"Heating is needed for: \" .. heatingNeededFor) \n            else\n                print(\"Heating is not needed.\")\n                if( actualBoilerState == true) then\n                    fibaro.call(self.boilerSwitchDeviceID, \"turnOff\")\n                    print(\"Boiler turned Off\")\n                end\n                self:updateView(\"status\", \"text\", \"Heating is not needed.\") \n            end \n            ]]--\n            -- open wiondow visual \n            if openWindowDetected == true then\n                self:updateView(\"lblWindow\", \"text\", \"Open window detected at: \" .. oopenWindowDetectedBy)\n            else\n                self:updateView(\"lblWindow\", \"text\", \" \" )\n            end\n            print(\"---\")\n\n            return heatingNeeded\n        end\n    end\n   \nend"
    },
    {
      "name": "utils",
      "isMain": false,
      "isOpen": false,
      "content": "function mergeTables(table1, table2)\n  for k, v in pairs (table1) do table.insert(table2, v) end\n  return table2\nend"
    }
  ]
}
